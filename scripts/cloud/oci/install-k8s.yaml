- import_playbook: "{{ playbook_dir }}/common/configure-common.yaml"
- hosts: k8s_controllers:k8s_nodes
  become: true
  collections:
    - community.general
  vars:
    k8s_baseurl: https://pkgs.k8s.io/core:/stable:/v{{ k8s_version }}/rpm
    cri_dockerd_baseurl: https://github.com/Mirantis/cri-dockerd/releases/download
    calico_baseurl: https://github.com/projectcalico/calico/releases/download
    download_arch: "{{ (ansible_architecture == 'aarch64') | ternary('arm64', 'amd64') }}"
    k8s_sysctl_file: /etc/sysctl.d/k8s.conf
    block_storage_size_override: "{{ block_storage_size | default('10G') }}"
    block_storage_id_override: "{{ block_storage_id | default('naa.5001405d524c201a') }}"

  tasks:
    - name: include vars
      include_vars: "{{ playbook_dir }}/common/config-vars.yaml"
      tags: always

    - name: Add k8s repository
      yum_repository:
        name: k8s_repo
        description: Kubernetes Repository
        baseurl: "{{ k8s_baseurl }}"

    - name: Verify k8s GPG keys
      rpm_key:
        key: "{{ k8s_baseurl }}/repodata/repomd.xml.key"

    - name: Install k8s
      package:
        name:
          - kubeadm
          - kubelet
          - kubectl
          - python3-pip
          - lvm2
          - targetcli
          - iscsi-initiator-utils
          - nfs-utils
          - jq
        state: latest
        update_cache: yes
      notify:
        - Reload k8s

    - name: Configure SCSI initiator
      command:
        cmd: echo "InitiatorName=$(/sbin/iscsi-iname)" > /etc/iscsi/initiatorname.iscsi
        creates: /etc/iscsi/initiatorname.iscsi

    - name: Create K8s configuration directory
      file:
        dest: /etc/kubernetes
        state: directory

    - name: Copy docker secrets
      copy:
        src: "{{ lookup('env', 'HOME') }}/var/secrets/docker-config.json"
        dest: /var/lib/kubelet/config.json
        mode: '600'
      failed_when: false

    - name: Create controller configs
      copy:
        dest: "/etc/kubernetes/{{ item }}"
        src: "{{ playbook_dir }}/k8s/{{ item }}"
      when: inventory_hostname in groups['k8s_controllers']
      loop:
        - controller-config.yaml
        - metallb-config.yaml

    - name: Create node config
      template:
        dest: /etc/kubernetes/node-config.yaml
        src: "{{ playbook_dir }}/k8s/node-config.yaml"
        mode: '600'
      when: inventory_hostname in groups['k8s_nodes'] and controller_address is defined and controller_address != ""

    - name: Check for existing k8s configuration
      stat:
        path: "{{ k8s_sysctl_file }}"
      register: k8s_sysctl_conf

    - name: Get temporary file name
      tempfile:
        state: file
      register: host_config_script
      when: k8s_sysctl_conf.stat.exists == false

    - name: Create host config script
      copy:
        dest: "{{ host_config_script.path }}"
        src: "{{ playbook_dir }}/k8s/host-config.sh"
        mode: '755'
      when: k8s_sysctl_conf.stat.exists == false

    - name: Run host config script
      command: "{{ host_config_script.path }}"
      when: k8s_sysctl_conf.stat.exists == false

    - name: Remove host config script
      file:
        path: "{{ host_config_script.path }}"
        state: absent
      when: k8s_sysctl_conf.stat.exists == false

    - name: Install github3 library
      pip:
        name: github3.py

    - name: Obtain latest cri-dockerd release
      github_release:
        user: Mirantis
        repo: cri-dockerd
        action: latest_release
        token: "{{ github_token | default('') }}"
      register: cri_dockerd_latest

    - name: Obtain latest MetalLB release
      github_release:
        user: metallb
        repo: metallb
        action: latest_release
        token: "{{ github_token | default('') }}"
      register: metallb_latest

    - name: Obtain latest Longhorn release
      github_release:
        user: longhorn
        repo: longhorn
        action: latest_release
        token: "{{ github_token | default('') }}"
      register: longhorn_latest

    - name: Download cri-dockerd binary
      unarchive:
        src: >-
          {{ cri_dockerd_baseurl }}/{{ cri_dockerd_latest['tag'] }}/cri-dockerd-{{ cri_dockerd_latest['tag']
          | regex_replace('^v','') }}.{{ download_arch }}.tgz
        dest: /usr/local/libexec
        remote_src: true
        extra_opts:
          - --strip=1
      notify:
        - Reload cri-dockerd

    - name: Install cri-dockerd service
      copy:
        dest: /etc/systemd/system/cri-dockerd.service
        content: |
          [Service]
          ExecStart=/usr/local/libexec/cri-dockerd --pod-infra-container-image registry.k8s.io/pause:{{ pause_container_version }}

          [Install]
          WantedBy=multi-user.target
      notify:
        - Reload systemd
        - Reload cri-dockerd

    - name: Configure NetworkManager for Calico
      copy:
        dest: /etc/NetworkManager/conf.d/calico.conf
        content: >
          [keyfile]

          unmanaged-devices=interface-name:cali*;interface-name:tunl*;interface-name:vxlan.calico;
          interface-name:vxlan-v6.calico;interface-name:wireguard.cali;interface-name:wg-v6.cali

    - name: Obtain latest calicoctl release
      github_release:
        user: projectcalico
        repo: calico
        action: latest_release
        token: "{{ github_token | default('') }}"
      register: calico_latest
      tags: calico

    - name: Set Calico version
      set_fact:
        calico_version: "{{ calico_release | default(calico_latest['tag']) }}"

    - name: Download calicoctl binary
      get_url:
        url: >-
          {{ calico_baseurl }}/{{ calico_latest['tag'] }}/calicoctl-{{ ansible_system | lower }}-{{ download_arch }}
        dest: /usr/local/bin/calicoctl
        mode: '755'

    - name: Create Block storage script
      template:
        dest: /usr/local/bin/create-block-storage.sh
        src: "{{ playbook_dir }}/k8s/create-block-storage.sh"
        mode: '755'
      tags: storage

    - name: Create Block storage
      command: /usr/local/bin/create-block-storage.sh
      args:
        creates: /var/block_storage.img
      when: false
      tags: storage

    - name: Enable and start K8s components
      service:
        name: "{{ item }}"
        enabled: true
        state: started
      loop:
        - cri-dockerd
        - kubelet
        - target
        - iscsid

    - name: Create k8s controller - kubeadm
      command:
        cmd: kubeadm init --config /etc/kubernetes/controller-config.yaml
        creates: /etc/kubernetes/admin.conf
      when: inventory_hostname in groups['k8s_controllers']

    - name: Get cluster join command
      command:
        cmd: kubeadm token create --print-join-command
      when: inventory_hostname in groups['k8s_controllers']
      changed_when: false
      register: join_token
      tags: join

    - name: Join k8s nodes - kubeadm
      command:
        cmd: kubeadm join --config /etc/kubernetes/node-config.yaml
        creates: /etc/kubernetes/kubelet.conf
      when: inventory_hostname in groups['k8s_nodes'] and controller_address is defined and controller_address != ""
      tags: join

    - name: create .kube directory
      file:
        path: .kube
        state: directory
      become: false
      when: inventory_hostname in groups['k8s_controllers']
      tags: controller

    - name: Set up credentials on controller
      copy:
        src: /etc/kubernetes/admin.conf
        dest: .kube/config
        remote_src: true
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      when: inventory_hostname in groups['k8s_controllers']
      tags: controller

    - name: See if Calico is set up
      command: kubectl get namespace tigera-operator calico-system
      become: false
      failed_when: false
      changed_when: false
      register: calico_namespace
      when: inventory_hostname in groups['k8s_controllers']
      tags: calico

    - name: Get temporary file name (calico)
      tempfile:
        state: file
      become: false
      register: calico_resource
      when: inventory_hostname in groups['k8s_controllers'] and calico_namespace.rc != 0
      tags: calico

    - name: Create calico resource file
      get_url:
        dest: "{{ calico_resource.path }}"
        url: "https://raw.githubusercontent.com/projectcalico/calico/{{ calico_version }}/manifests/custom-resources.yaml"
      become: false
      when: inventory_hostname in groups['k8s_controllers'] and calico_namespace.rc != 0
      tags: calico

    - name: Calico - set VXLan resource
      replace:
        path: "{{ calico_resource.path }}"
        regexp: "encapsulation:\\s+VXLANCrossSubnet"
        replace: "encapsulation: VXLAN"
      become: false
      when: inventory_hostname in groups['k8s_controllers'] and vxlan | default(false) | bool == true  and calico_namespace.rc != 0
      tags: calico

    - name: Create MetalLB wait script
      copy:
        src: "{{ playbook_dir }}/k8s/metallb-wait.sh"
        dest: /usr/local/bin/
        mode: '755'

    - name: Display cluster join command
      debug: msg="{{ join_token.stdout | trim }}"
      when: inventory_hostname in groups['k8s_controllers']
      tags: join

    - name: Create local .kube directory
      local_action:
        module: file
        path: ~/.kube
        mode: '700'
        state: directory
      become: false
      when: inventory_hostname in groups['k8s_controllers'] and calico_namespace.rc != 0

    - name: Copy cluster k8s configuration to local
      fetch:
        src: ~/.kube/config
        dest: ~/.kube/config
        flat: yes
      become: false
      when: inventory_hostname in groups['k8s_controllers'] and calico_namespace.rc != 0

    - name: Restrict local k8s configuration file
      local_action:
        module: file
        path: ~/.kube/config
        mode: '600'
      become: false
      when: inventory_hostname in groups['k8s_controllers'] and calico_namespace.rc != 0

    - name: Set up Calico and MetalLB
      command: "{{ item }}"
      become: false
      when: inventory_hostname in groups['k8s_controllers'] and calico_namespace.rc != 0
      loop:
        - "kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/{{ calico_version }}/manifests/tigera-operator.yaml"
        - "kubectl create -f {{ calico_resource.path }}"
        - "kubectl taint nodes --all node-role.kubernetes.io/control-plane-"
        - "kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/{{ metallb_latest['tag'] }}/config/manifests/metallb-native.yaml"
        - "/usr/local/bin/metallb-wait.sh"
      tags: calico

    - name: Install TZ Helm repo
      local_action:
        module: command
        cmd: "helm repo add k8tz https://k8tz.github.io/k8tz/"
      become: false
      changed_when: false
      when: inventory_hostname in groups['k8s_controllers'] and calico_namespace.rc != 0
      tags: tz

    - name: Install TZ Helm chart
      local_action:
        module: command
        cmd: "helm upgrade --install k8tz k8tz/k8tz --set timezone={{ timezone }}"
      become: false
      changed_when: false
      when: inventory_hostname in groups['k8s_controllers'] and calico_namespace.rc != 0
      tags: tz

    - name: Un-taint, metrics, longhorn, labels
      command: "{{ item }}"
      become: false
      when: inventory_hostname in groups['k8s_controllers'] and calico_namespace.rc != 0
      loop:
        - "kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml"
        - "kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/{{ longhorn_latest['tag'] }}/deploy/longhorn.yaml"
        - "kubectl label nodes {{ inventory_hostname_short }} memory-sensitive=true "
      tags: calico

    - name: Remove calico resource file
      file:
        path: "{{ calico_resource.path }}"
        state: absent
      become: false
      when: inventory_hostname in groups['k8s_controllers'] and calico_namespace.rc != 0
      tags: calico

  handlers:
    - name: Reload systemd
      systemd_service:
        daemon_reload: true

    - name: Reload k8s
      service:
        name: 'kubelet'
        state: restarted

    - name: Reload cri-dockerd
      service:
        name: 'cri-dockerd'
        state: restarted
