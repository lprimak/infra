- hosts: localhost
  gather_facts: false
  collections:
    - oracle.oci
  vars:
    zero_cidr: "0.0.0.0/0"
    user_override: |
      #cloud-config
      system_info:
        default_user:
          name: flowlogix
  tasks:
  - name: include vars
    include_vars: "{{ playbook_dir }}/common/config-vars.yaml"
    tags:
    - always

  - name: Create VCNs
    oci_network_vcn:
      compartment_id: "{{ compartment_id }}"
      display_name: "{{ lookup('vars', item + '_network_name') }}"
      dns_label: "{{ item }}"
      cidr_block: 10.0.0.0/16
    register: network
    loop:
      - web

  - name: Update VCN DHCP Subnet Options
    oci_network_dhcp_options:
      compartment_id: "{{ item.vcn.compartment_id }}"
      vcn_id: "{{ item.vcn.id }}"
      dhcp_id: "{{ item.vcn.default_dhcp_options_id}}"
      domain_name_type: SUBNET_DOMAIN
      options:
        -
          server_type: VcnLocalPlusInternet
          type: DomainNameServer
    no_log: true
    loop:
      "{{ network.results }}"

  - name: Create a new Internet Gateway
    oci_network_internet_gateway:
      compartment_id: "{{ item.vcn.compartment_id }}"
      vcn_id: "{{ item.vcn.id }}"
      name: "inet-gw"
      is_enabled: true
    register: gateway
    no_log: true
    loop:
      "{{ network.results }}"

  - name: Create route table to connect internet gateway to the VCN
    oci_network_route_table:
      compartment_id: "{{ item.internet_gateway.compartment_id }}"
      vcn_id: "{{ item.internet_gateway.vcn_id }}"
      name: "inet-route-table"
      key_by: [compartment_id, vcn_id, display_name]
      route_rules:
        - cidr_block: "{{ zero_cidr }}"
          network_entity_id: "{{ item.internet_gateway.id }}"
    register: inetroute
    no_log: true
    loop:
      "{{ gateway.results }}"

  - name: Set network variables
    set_fact:
      web_network: "{{ network.results[0] }}"
      web_inetroute: "{{ inetroute.results[0] }}"

  - name: Create web security group
    oci_network_security_group:
      compartment_id: "{{ web_network.vcn.compartment_id }}"
      vcn_id: "{{ web_network.vcn.id }}"
      display_name: 'web security group'
    register: web_security_group

  - name: Configure web security group
    oci_network_security_group_security_rule_actions:
      network_security_group_id: "{{ web_security_group.network_security_group.id }}"
      action: add
      security_rules:
        -
          direction: INGRESS
          is_stateless: true
          protocol: 6
          source: "{{ zero_cidr }}"
          tcp_options:
            destination_port_range:
              min: "{{ item }}"
              max: "{{ item }}"
          description: "Open Port {{ item }}/tcp"
    loop:
      - 80
      - 443

  - name: Create k8s security group
    oci_network_security_group:
      compartment_id: "{{ web_network.vcn.compartment_id }}"
      vcn_id: "{{ web_network.vcn.id }}"
      display_name: 'k8s security group'
    register: k8s_security_group

  - name: Configure k8s security group (tcp)
    oci_network_security_group_security_rule_actions:
      network_security_group_id: "{{ k8s_security_group.network_security_group.id }}"
      action: add
      security_rules:
        - direction: INGRESS
          is_stateless: true
          protocol: 6
          source: "{{ net_cidr_block }}"
          tcp_options:
            destination_port_range:
              min: "{{ item }}"
              max: "{{ item }}"
          description: "Open Port {{ item }}/tcp"
    loop:
      - 179
      - 2379
      - 5473
      - 6443
      - 10250

  - name: Configure k8s security group (udp)
    oci_network_security_group_security_rule_actions:
      network_security_group_id: "{{ k8s_security_group.network_security_group.id }}"
      action: add
      security_rules:
        - direction: INGRESS
          is_stateless: true
          protocol: 17
          source: "{{ net_cidr_block }}"
          udp_options:
            destination_port_range:
              min: "{{ item }}"
              max: "{{ item }}"
          description: "Open Port {{ item }}/udp"
    loop:
      - 4789

  - name: Create Subnets
    oci_network_subnet:
      compartment_id: "{{ web_network.vcn.compartment_id }}"
      vcn_id: "{{ lookup('vars', item + '_network').vcn.id }}"
      dns_label: fl
      cidr_block: "{{ net_cidr_block }}"
      route_table_id: "{{ lookup('vars', item + '_inetroute').route_table.id }}"
      security_list_ids:
        - "{{ lookup('vars', item + '_network').vcn.default_security_list_id }}"
    register: subnets
    loop:
      - web

  - name: Set subnet variables
    set_fact:
      web_subnet: "{{ subnets.results[0] }}"

  - name: Create Web Network Load Balancer
    oci_network_load_balancer:
      compartment_id: "{{ web_network.vcn.compartment_id }}"
      display_name: "web-nlb"
      subnet_id: "{{ web_subnet.subnet.id }}"
      is_private: false
    register: web_nlb
    tags:
      - web
      - nlb

  - name: "Web NLB: Update Security Groups"
    oci_network_load_balancer_network_security_groups_update:
      network_load_balancer_id: "{{ web_nlb.network_load_balancer.id }}"
      network_security_group_ids:
        - "{{ web_security_group.network_security_group.id }}"
    tags:
     - web
     - nlb

  - name: Provision Web Server
    oci_compute_instance:
      name: "{{ web_host_name }}"
      compartment_id: "{{ web_network.vcn.compartment_id }}"
      availability_domain: "{{ web_availability_domain }}"
      shape: VM.Standard.A1.Flex
      key_by: [compartment_id, availability_domain, display_name]
      shape_config:
        ocpus: 2
        memory_in_gbs: 2
      image_id: "{{ image_id }}"
      subnet_id: "{{ web_subnet.subnet.id }}"
      create_vnic_details:
        nsg_ids: "{{ web_security_group.network_security_group.id }}"
      metadata:
        ssh_authorized_keys:
          "{{ lookup('file', '~/.ssh/oci-key-20251028.pem.pub' ) }}"
        user_data: "{{ user_override|b64encode }}"
    register: webserver
    tags:
      - web

  - name: Provision Container Server
    oci_compute_instance:
      name: "{{ docker_host_name }}"
      compartment_id: "{{ web_network.vcn.compartment_id }}"
      availability_domain: "{{ sec_availability_domain }}"
      shape: VM.Standard.A1.Flex
      key_by: [compartment_id, availability_domain, display_name]
      shape_config:
        ocpus: 2
        memory_in_gbs: 20
      source_details:
        source_type: image
        image_id: "{{ image_id }}"
        boot_volume_size_in_gbs: 100
      subnet_id: "{{ web_subnet.subnet.id }}"
      create_vnic_details:
        nsg_ids: "{{ web_security_group.network_security_group.id }}"
      metadata:
        ssh_authorized_keys:
          "{{ lookup('file', '~/.ssh/oci-key-20251028-containers.pem.pub' ) }}"
        user_data: "{{ user_override|b64encode }}"
    register: docker_server
    tags:
      - docker

  - name: "Web NLB: Create Backend Set"
    oci_network_load_balancer_backend_set:
      network_load_balancer_id: "{{ web_nlb.network_load_balancer.id }}"
      name: "web-backend-set"
      policy: "TWO_TUPLE"
      key_by: [network_load_balancer_id, name]
      health_checker:
        protocol: "HTTP"
        port: 80
        interval_in_millis: 10000
        timeout_in_millis: 3000
        retries: 3
        return_code: 302
      backends:
        - port: 0
          target_id: "{{ webserver.instance.id }}"
          is_backup: false
    register: web_nlb_backend_set
    tags:
      - web
      - nlb

  - name: "Web NLB: Create Listener (All Ports)"
    oci_network_load_balancer_listener:
      network_load_balancer_id: "{{ web_nlb.network_load_balancer.id }}"
      key_by: [network_load_balancer_id, name]
      name: "all-ports-listener"
      default_backend_set_name: "{{ web_nlb_backend_set.backend_set.name }}"
      protocol: "TCP_AND_UDP"
      port: 0
    tags:
      - web
      - nlb

  - name: Create Longhorn backup bucket
    oci_object_storage_bucket:
      namespace_name: "{{ bucket_namespace }}"
      compartment_id: "{{ compartment_id }}"
      name: 'longhorn-backups'
      public_access_type: 'NoPublicAccess'
      state: 'present'
    tags:
      - storage

  - name: Display IPs
    debug:
      msg: "Server instance {{ lookup('vars', item).instance.display_name }} with IP {{ lookup('vars', item).instance.primary_public_ip }}"
    when: lookup('vars', item, default='').instance.id is defined
    loop:
      - webserver
      - docker_server
    tags:
      - web
      - docker

  - name: Display Web NLB IP
    debug:
      msg: "Web Network Load Balancer IP: {{ web_nlb.network_load_balancer.ip_addresses[0].ip_address }}"
    tags:
      - web
      - nlb
